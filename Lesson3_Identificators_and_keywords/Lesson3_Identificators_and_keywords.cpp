/*
Язык C++ имеет зарезервированный набор из 84 слов (включая версию С++17) для собственного использования. 
Эти слова называются ключевыми словами, каждое из которых имеет свое особое значение.

Идентификатор — это имя переменной, функции, класса или другого объекта в языке C++. 
Мы можем определять идентификаторы любыми словами/именами. 
Тем не менее, есть несколько общих правил, которые необходимо соблюдать:

1) Идентификатор не может быть ключевым словом. Ключевые слова зарезервированы.
2) Идентификатор может состоять только из букв (нижнего и верхнего регистра) латинского алфавита, цифр 
и символов подчёркивания. Это означает, что все другие символы и пробелы — запрещены.
3) Идентификатор должен начинаться с буквы (нижнего или верхнего регистра). Он не может начинаться с цифры.
4) Язык C++ различает нижний регистр от верхнего. nvalue отличается от nValue и отличается от NVALUE.



Если имя переменной или функции состоит из нескольких слов, то здесь есть два варианта: 
разделить подчёркиванием или использовать CamelCase — принцип, когда несколько слов пишутся слитно, 
без пробелов, и каждое новое слово пишется с заглавной буквы. CamelCase (в переводе как «ВерблюжийСтиль») 
получил свое название из-за заглавных букв, которые напоминают верблюжьи горбы.
*/

int value; // корректно

int Value; // некорректно (должно начинаться с буквы в нижнем регистре)
int VALUE; // некорректно (должно начинаться с буквы в нижнем регистре)
int VaLuE; // некорректно (должно начинаться с буквы в нижнем регистре)

int my_variable_name; // корректно (разделяется символом подчёркивания)
void my_function_name(); // корректно (разделяется символом подчёркивания)

int myVariableName; // корректно (используется CamelCase)
void myFunctionName(); // корректно (используется CamelCase)

//int my variable name; // некорректно (пробелы запрещены)
//void my function name(); // некорректно (пробелы запрещены) 

int MyVariableName; // работает, но не рекомендуется (следует начинать с буквы в нижнем регистре)
void MyFunctionName(); // работает, но не рекомендуется



/*
Литерал — это фиксированное значение, которое записывается непосредственно в исходном коде (например, 7 или 3.14159). 
Вот пример программы, которая использует литералы:
*/

/*
Последним пазлом в выражениях являются операторы. С их помощью мы можем объединить операнды для получения нового значения.
Например, в выражении 5 + 2, + является оператором. 
С помощью + мы объединили операнды 5 и 2 для получения нового значения (7)
Операторы разделяют по количеству операндов:
- Унарные: Принимают 1 операнд, например, -7, <<
- Бинарные: Используют 2 операнда, такие как +
- Единственный ТРЕНАРНЫЙ оператор это c ? x : y
Если c — ненулевое значение (true), то вычисляется x, в противном случае — y
*/


#include <iostream>

int add(int x, int y); // предварительное объявление функции add() (используется её прототип)
int add_and_dupe(int x, int y); // Это тоже прототип, но его полноценное определение будет подтянуто из соседнего файла!

int main()
{
	int a = 3; // a – это переменная, 3 – это литерал
	std::cout << 5 + 2; // 5 + 2 – это выражение, 5 и 2 – это литералы
	std::cout << "Hello, world!" << std::endl; // "Hello, world" – это тоже литерал
	std::cout << "The sum of 3 and 4 is: " << add(3, 4) << std::endl;
	int x = 10;
	int y = 12;
	std::cout << "Result of using sparated function: " << add_and_dupe(x, y) << std::endl;
	return 0;
}



int add(int x, int y) // определяем функцию add()
{
	int z = x + y; // определяем переменную z

	return z;
}