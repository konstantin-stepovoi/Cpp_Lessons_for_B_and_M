l-values и r-values
В языке C++ все переменные являются l-values. 
l-value (в переводе «л-значение», произносится как «ел-валью») — это значение, которое имеет свой собственный
адрес в памяти. Поскольку все переменные имеют адреса, то они все являются l-values 
(например, переменные a, b, c — все они являются l-values). l от слова «left», так как только значения l-values могут
находиться в левой стороне в операциях присваивания (в противном случае, мы получим ошибку). Например, 
стейтмент 9 = 10; вызовет ошибку компилятора, так как 9 не является l-value. 
Число 9 не имеет своего адреса в памяти и, таким образом, мы ничего не можем ему присвоить 
(9 = 9 и ничего здесь не изменить).

Противоположностью l-value является r-value (в переводе «р-значение», произносится как «ер-валью»). 
r-value — это значение, которое не имеет постоянного адреса в памяти. Примерами могут быть единичные числа
(например, 7, которое имеет значение 7) или выражения (например, 3 + х, которое имеет значение х плюс 3).

Инициализация vs. Присваивание
В языке C++ есть две похожие концепции, которые новички часто путают: присваивание и инициализация.

После объявления переменной, ей можно присвоить значение с помощью оператора присваивания (знак равенства =):

int a; // это объявление переменной
a = 8; // а это присваивание переменной a значения 8

Правило: Если у вас изначально имеется значение для переменной, то используйте инициализацию, вместо присваивания.

Неинициализированные переменные
В отличие от других языков программирования, языки Cи и C++ не инициализируют переменные определенными значениями (например, нулем) по умолчанию. Поэтому, при создании переменной, ей присваивается ячейка в памяти, в которой уже может находиться какой-нибудь мусор! Переменная без значения (со стороны программиста или пользователя) называется неинициализированной переменной.

Использование неинициализированных переменных может привести к ошибкам.