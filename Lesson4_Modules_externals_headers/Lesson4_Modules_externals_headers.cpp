/*
* По мере увеличения размера программ весь код уже не помещается в нескольких файлах, 
* записывать каждый раз предварительные объявления для функций, 
* которые мы хотим использовать, но которые находятся в других файлах
*/

/*
Написать свой собственный заголовочный файл не так уж и сложно. 
Заголовочные файлы состоят из двух частей:
Директивы препроцессора — в частности, header guards, которые предотвращают вызов заголовочного файла больше одного раза из одного и того же файла (об этом детально на следующем уроке).
Содержимое заголовочного файла — набор объявлений.
Все ваши заголовочные файлы (которые вы написали самостоятельно) должны иметь расширение .h.
*/

// #include - это тоже директива препроцессора.
// она будет выполнена до компилляции основной программы
#include <iostream> 


//а это макрос с заменой текста:

#define MY_FAVORITE_NUMBER 9
/*Когда препроцессор встречает макросы - объекты с текст_замена,
то любое дальнейшее появление идентификатор заменяется на текст_замена.
идентификатор обычно пишется заглавными буквами с символами подчёркивания вместо пробелов.
*/

int exter_summ(int x, int y); // предварительное объявление с использованием прототипа функции

// Давайте же импортируем новую функцию из header file:

#include "Summ_Header.h"

/*
Когда компилятор встречает #include "***.h", он копирует всё содержимое ***.h в текущий файл.
*/

int main()
{
    std::cout << "The sum of 3 and 4 is " << exter_summ(3, 4) << std::endl;
    int summ = summ_header(20, 1);
    std::cout << "Summ from header is " << summ << std::endl;
    summ = summ_correct(5, 2);
    std::cout << "Proper summ from header is " << summ << std::endl;
    std::cout << "My favorite number is: " << MY_FAVORITE_NUMBER << std::endl;
    return 0;
}
/*
Правило: Используйте угловые скобки
для подключения «системных» заголовочных файлов и двойные кавычки
для ваших заголовочных файлов.

Стоит отметить, что одни заголовочные файлы могут подключать другие заголовочные файлы.
Тем не менее, так делать не рекомендуется.
*/