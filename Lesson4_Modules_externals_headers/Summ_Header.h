/*
Для начала в h файле мы ставим специальную директиву препроцессора
Зачем нужно: Предотвращает ошибку "повторное определение" 
при множественном подключении одного заголовка.
*/

// Вот более старая версия header_guards, которая поддерживается более старыми компилляторами
#ifndef SOME_UNIQUE_NAME
#define SOME_UNIQUE_NAME

// основная часть кода

#endif

// В header - файлах можно создавать новые свои функции как в это делалось в питон - модулях. Тем не менее, делать так не следует.
// Хедеры существуют именно для ОБЪЯВЛЕНИЯ а не для определения функций.
// Определения существуют в cpp файлах
// В Хэдере можно доопределить какие - нибудь константы, например:

float pi = 3.1415;

#pragma once
inline int summ_header(int x, int y) {
	return x + y;
}

int summ_correct(int x, int y); //А вот это правильный подход: Реализация функции в одном файле,
// А упрощение импортов в другом

/*Вот несколько советов по написанию собственных заголовочных файлов :

Всегда используйте директивы препроцессора.

Не определяйте переменные в заголовочных файлах, если это не константы.Заголовочные файлы следует использовать только для объявлений.

Не определяйте функции в заголовочных файлах.

Каждый заголовочный файл должен выполнять свое конкретное задание и быть как можно более независимым.Например, вы можете поместить все ваши объявления, связанные с файлом А.cpp в файл A.h, а все ваши объявления, связанные с B.cpp — в файл B.h.Таким образом, если вы будете работать только с А.cpp, то вам будет достаточно подключить только A.h и наоборот.

Используйте имена ваших рабочих файлов в качестве имен для ваших заголовочных файлов(например, grades.h работает с grades.cpp).

Не подключайте одни заголовочные файлы из других заголовочных файлов.

Не подключайте файлы.cpp, используя директиву препроцессора #include.

*/
